// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: answers.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createAnswer = `-- name: CreateAnswer :one
INSERT INTO answers (
	quiz_id,
	trivia_id,
	option_id
)
VALUES ($1, $2, $3)
RETURNING answers.id
`

type CreateAnswerParams struct {
	QuizID   int64
	TriviaID uuid.UUID
	OptionID uuid.UUID
}

func (q *Queries) CreateAnswer(ctx context.Context, arg CreateAnswerParams) (int64, error) {
	row := q.db.QueryRow(ctx, createAnswer, arg.QuizID, arg.TriviaID, arg.OptionID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

const getAnswerByID = `-- name: GetAnswerByID :one
SELECT id, quiz_id, trivia_id, option_id FROM answers
WHERE id = $1
`

func (q *Queries) GetAnswerByID(ctx context.Context, id int64) (Answer, error) {
	row := q.db.QueryRow(ctx, getAnswerByID, id)
	var i Answer
	err := row.Scan(
		&i.ID,
		&i.QuizID,
		&i.TriviaID,
		&i.OptionID,
	)
	return i, err
}

const getAnswersByQuizID = `-- name: GetAnswersByQuizID :many
SELECT answers.id as id, trivias.id as trivia_id FROM answers
JOIN trivias ON answers.trivia_id = trivias.id
WHERE answers.quiz_id = $1
`

type GetAnswersByQuizIDRow struct {
	ID       int64
	TriviaID uuid.UUID
}

func (q *Queries) GetAnswersByQuizID(ctx context.Context, quizID int64) ([]GetAnswersByQuizIDRow, error) {
	rows, err := q.db.Query(ctx, getAnswersByQuizID, quizID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAnswersByQuizIDRow
	for rows.Next() {
		var i GetAnswersByQuizIDRow
		if err := rows.Scan(&i.ID, &i.TriviaID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOptionByAnswerID = `-- name: GetOptionByAnswerID :one
SELECT options.id, options.option, options.correct, options.trivia_id FROM answers
JOIN options ON answers.option_id = options.id
WHERE answers.id = $1
`

func (q *Queries) GetOptionByAnswerID(ctx context.Context, id int64) (Option, error) {
	row := q.db.QueryRow(ctx, getOptionByAnswerID, id)
	var i Option
	err := row.Scan(
		&i.ID,
		&i.Option,
		&i.Correct,
		&i.TriviaID,
	)
	return i, err
}
