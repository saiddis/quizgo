// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: copyfrom.go

package database

import (
	"context"
)

// iteratorForCreateOptions implements pgx.CopyFromSource.
type iteratorForCreateOptions struct {
	rows                 []CreateOptionsParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateOptions) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateOptions) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].Option,
		r.rows[0].Correct,
		r.rows[0].TriviaID,
	}, nil
}

func (r iteratorForCreateOptions) Err() error {
	return nil
}

func (q *Queries) CreateOptions(ctx context.Context, arg []CreateOptionsParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"options"}, []string{"id", "option", "correct", "trivia_id"}, &iteratorForCreateOptions{rows: arg})
}

// iteratorForCreateQuizzesTrivias implements pgx.CopyFromSource.
type iteratorForCreateQuizzesTrivias struct {
	rows                 []CreateQuizzesTriviasParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateQuizzesTrivias) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateQuizzesTrivias) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].QuizID,
		r.rows[0].TriviaID,
	}, nil
}

func (r iteratorForCreateQuizzesTrivias) Err() error {
	return nil
}

func (q *Queries) CreateQuizzesTrivias(ctx context.Context, arg []CreateQuizzesTriviasParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"quizzes_trivias"}, []string{"quiz_id", "trivia_id"}, &iteratorForCreateQuizzesTrivias{rows: arg})
}

// iteratorForCreateTrivias implements pgx.CopyFromSource.
type iteratorForCreateTrivias struct {
	rows                 []CreateTriviasParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreateTrivias) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreateTrivias) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].ID,
		r.rows[0].Type,
		r.rows[0].Category,
		r.rows[0].Difficulty,
		r.rows[0].Question,
	}, nil
}

func (r iteratorForCreateTrivias) Err() error {
	return nil
}

func (q *Queries) CreateTrivias(ctx context.Context, arg []CreateTriviasParams) (int64, error) {
	return q.db.CopyFrom(ctx, []string{"trivias"}, []string{"id", "type", "category", "difficulty", "question"}, &iteratorForCreateTrivias{rows: arg})
}
