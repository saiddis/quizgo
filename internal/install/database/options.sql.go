// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: options.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createOption = `-- name: CreateOption :one
INSERT INTO options (
	id,
	option,
	correct,
	trivia_id
)
VALUES ($1, $2, $3, $4)
RETURNING options.id
`

type CreateOptionParams struct {
	ID       uuid.UUID
	Option   string
	Correct  bool
	TriviaID uuid.UUID
}

func (q *Queries) CreateOption(ctx context.Context, arg CreateOptionParams) (uuid.UUID, error) {
	row := q.db.QueryRow(ctx, createOption,
		arg.ID,
		arg.Option,
		arg.Correct,
		arg.TriviaID,
	)
	var id uuid.UUID
	err := row.Scan(&id)
	return id, err
}

type CreateOptionsParams struct {
	ID       uuid.UUID
	Option   string
	Correct  bool
	TriviaID uuid.UUID
}

const getOptionByID = `-- name: GetOptionByID :one
SELECT id, option, correct, trivia_id FROM options
WHERE id = $1
`

func (q *Queries) GetOptionByID(ctx context.Context, id uuid.UUID) (Option, error) {
	row := q.db.QueryRow(ctx, getOptionByID, id)
	var i Option
	err := row.Scan(
		&i.ID,
		&i.Option,
		&i.Correct,
		&i.TriviaID,
	)
	return i, err
}

const getOptionsIDByTriviaID = `-- name: GetOptionsIDByTriviaID :many
SELECT options.id as id, options.correct as correct FROM options
JOIN trivias ON trivia_id = trivias.id
WHERE trivia_id = $1
`

type GetOptionsIDByTriviaIDRow struct {
	ID      uuid.UUID
	Correct bool
}

func (q *Queries) GetOptionsIDByTriviaID(ctx context.Context, triviaID uuid.UUID) ([]GetOptionsIDByTriviaIDRow, error) {
	rows, err := q.db.Query(ctx, getOptionsIDByTriviaID, triviaID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOptionsIDByTriviaIDRow
	for rows.Next() {
		var i GetOptionsIDByTriviaIDRow
		if err := rows.Scan(&i.ID, &i.Correct); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
