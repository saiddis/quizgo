// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: options.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createOption = `-- name: CreateOption :one
INSERT INTO options (
	id,
	option,
	correct,
	trivia_id
)
VALUES ($1, $2, $3, $4)
RETURNING id, option, correct, trivia_id
`

type CreateOptionParams struct {
	ID       int64
	Option   string
	Correct  bool
	TriviaID uuid.UUID
}

func (q *Queries) CreateOption(ctx context.Context, arg CreateOptionParams) (Option, error) {
	row := q.db.QueryRowContext(ctx, createOption,
		arg.ID,
		arg.Option,
		arg.Correct,
		arg.TriviaID,
	)
	var i Option
	err := row.Scan(
		&i.ID,
		&i.Option,
		&i.Correct,
		&i.TriviaID,
	)
	return i, err
}

const getOptionByID = `-- name: GetOptionByID :one
SELECT id, option, correct, trivia_id FROM options
WHERE id = $1
`

func (q *Queries) GetOptionByID(ctx context.Context, id int64) (Option, error) {
	row := q.db.QueryRowContext(ctx, getOptionByID, id)
	var i Option
	err := row.Scan(
		&i.ID,
		&i.Option,
		&i.Correct,
		&i.TriviaID,
	)
	return i, err
}

const getOptionsByTriviaID = `-- name: GetOptionsByTriviaID :many
SELECT options.id, option, correct, trivia_id, trivias.id, type, category, difficulty, question FROM options
JOIN trivias ON trivia_id = trivias.id
WHERE trivia_id = $1
`

type GetOptionsByTriviaIDRow struct {
	ID         int64
	Option     string
	Correct    bool
	TriviaID   uuid.UUID
	ID_2       uuid.UUID
	Type       string
	Category   string
	Difficulty string
	Question   string
}

func (q *Queries) GetOptionsByTriviaID(ctx context.Context, triviaID uuid.UUID) ([]GetOptionsByTriviaIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getOptionsByTriviaID, triviaID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOptionsByTriviaIDRow
	for rows.Next() {
		var i GetOptionsByTriviaIDRow
		if err := rows.Scan(
			&i.ID,
			&i.Option,
			&i.Correct,
			&i.TriviaID,
			&i.ID_2,
			&i.Type,
			&i.Category,
			&i.Difficulty,
			&i.Question,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
