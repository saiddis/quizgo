// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: quizzes_trivias.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createQuizTrivia = `-- name: CreateQuizTrivia :one
INSERT INTO quizzes_trivias (
	quiz_id,
	trivia_id
)
VALUES ($1, $2)
RETURNING quizzes_trivias.id
`

type CreateQuizTriviaParams struct {
	QuizID   int64
	TriviaID uuid.UUID
}

func (q *Queries) CreateQuizTrivia(ctx context.Context, arg CreateQuizTriviaParams) (int64, error) {
	row := q.db.QueryRow(ctx, createQuizTrivia, arg.QuizID, arg.TriviaID)
	var id int64
	err := row.Scan(&id)
	return id, err
}

type CreateQuizzesTriviasParams struct {
	QuizID   int64
	TriviaID uuid.UUID
}

const getQuizTriviaByID = `-- name: GetQuizTriviaByID :one
SELECT id, quiz_id, trivia_id FROM quizzes_trivias
WHERE id = $1
`

func (q *Queries) GetQuizTriviaByID(ctx context.Context, id int64) (QuizzesTrivia, error) {
	row := q.db.QueryRow(ctx, getQuizTriviaByID, id)
	var i QuizzesTrivia
	err := row.Scan(&i.ID, &i.QuizID, &i.TriviaID)
	return i, err
}

const getQuizzesByTriviaID = `-- name: GetQuizzesByTriviaID :many
SELECT quizzes.id, quizzes.created_at, quizzes.type, quizzes.category, quizzes.user_id, quizzes.score_id FROM quizzes_trivias
JOIN quizzes ON quizzes_trivias.quiz_id = quizzes.id
WHERE quizzes_trivias.trivia_id = $1
`

func (q *Queries) GetQuizzesByTriviaID(ctx context.Context, triviaID uuid.UUID) ([]Quiz, error) {
	rows, err := q.db.Query(ctx, getQuizzesByTriviaID, triviaID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Quiz
	for rows.Next() {
		var i Quiz
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.Type,
			&i.Category,
			&i.UserID,
			&i.ScoreID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTriviasByQuizID = `-- name: GetTriviasByQuizID :many
SELECT trivias.id, trivias.type, trivias.category, trivias.difficulty, trivias.question FROM quizzes_trivias
JOIN trivias ON quizzes_trivias.trivia_id = trivias.id
WHERE quizzes_trivias.quiz_id = $1
`

func (q *Queries) GetTriviasByQuizID(ctx context.Context, quizID int64) ([]Trivia, error) {
	rows, err := q.db.Query(ctx, getTriviasByQuizID, quizID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Trivia
	for rows.Next() {
		var i Trivia
		if err := rows.Scan(
			&i.ID,
			&i.Type,
			&i.Category,
			&i.Difficulty,
			&i.Question,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
