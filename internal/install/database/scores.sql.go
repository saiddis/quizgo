// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: scores.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createScore = `-- name: CreateScore :one
INSERT INTO scores (
	id,
	completion_time,
	hard_quizzes_done,
	medium_quizzes_done,
	easy_quizzes_done, 
	total_score, 
	user_id
)
VALUES ($1, $2, $3, $4, $5, $6, $7)
RETURNING id, completion_time, hard_quizzes_done, medium_quizzes_done, easy_quizzes_done, total_score, user_id
`

type CreateScoreParams struct {
	ID                uuid.UUID
	CompletionTime    string
	HardQuizzesDone   int32
	MediumQuizzesDone int32
	EasyQuizzesDone   int32
	TotalScore        int32
	UserID            uuid.UUID
}

func (q *Queries) CreateScore(ctx context.Context, arg CreateScoreParams) (Score, error) {
	row := q.db.QueryRowContext(ctx, createScore,
		arg.ID,
		arg.CompletionTime,
		arg.HardQuizzesDone,
		arg.MediumQuizzesDone,
		arg.EasyQuizzesDone,
		arg.TotalScore,
		arg.UserID,
	)
	var i Score
	err := row.Scan(
		&i.ID,
		&i.CompletionTime,
		&i.HardQuizzesDone,
		&i.MediumQuizzesDone,
		&i.EasyQuizzesDone,
		&i.TotalScore,
		&i.UserID,
	)
	return i, err
}

const getScoresByUserID = `-- name: GetScoresByUserID :many
SELECT id, completion_time, hard_quizzes_done, medium_quizzes_done, easy_quizzes_done, total_score, user_id FROM scores
WHERE user_id = $1
`

func (q *Queries) GetScoresByUserID(ctx context.Context, userID uuid.UUID) ([]Score, error) {
	rows, err := q.db.QueryContext(ctx, getScoresByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Score
	for rows.Next() {
		var i Score
		if err := rows.Scan(
			&i.ID,
			&i.CompletionTime,
			&i.HardQuizzesDone,
			&i.MediumQuizzesDone,
			&i.EasyQuizzesDone,
			&i.TotalScore,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
