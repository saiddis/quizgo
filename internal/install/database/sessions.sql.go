// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sessions.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createSession = `-- name: CreateSession :one
INSERT INTO sessions (
	id,
	created_at,
	quiz_type,
	quiz_category,
	user_id
)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, created_at, quiz_type, quiz_category, user_id
`

type CreateSessionParams struct {
	ID           uuid.UUID
	CreatedAt    time.Time
	QuizType     string
	QuizCategory string
	UserID       uuid.NullUUID
}

func (q *Queries) CreateSession(ctx context.Context, arg CreateSessionParams) (Session, error) {
	row := q.db.QueryRowContext(ctx, createSession,
		arg.ID,
		arg.CreatedAt,
		arg.QuizType,
		arg.QuizCategory,
		arg.UserID,
	)
	var i Session
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.QuizType,
		&i.QuizCategory,
		&i.UserID,
	)
	return i, err
}

const getSessionsByUserID = `-- name: GetSessionsByUserID :many
SELECT id, created_at, quiz_type, quiz_category, user_id FROM sessions
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetSessionsByUserID(ctx context.Context, userID uuid.NullUUID) ([]Session, error) {
	rows, err := q.db.QueryContext(ctx, getSessionsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Session
	for rows.Next() {
		var i Session
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.QuizType,
			&i.QuizCategory,
			&i.UserID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
