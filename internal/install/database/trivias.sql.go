// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: trivias.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createTrivia = `-- name: CreateTrivia :one
INSERT INTO trivias (
	id,
	type,
	category,	
	difficulty,
	question
)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, type, category, difficulty, question
`

type CreateTriviaParams struct {
	ID         uuid.UUID
	Type       string
	Category   string
	Difficulty string
	Question   string
}

func (q *Queries) CreateTrivia(ctx context.Context, arg CreateTriviaParams) (Trivia, error) {
	row := q.db.QueryRowContext(ctx, createTrivia,
		arg.ID,
		arg.Type,
		arg.Category,
		arg.Difficulty,
		arg.Question,
	)
	var i Trivia
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Category,
		&i.Difficulty,
		&i.Question,
	)
	return i, err
}

const getTriviaByID = `-- name: GetTriviaByID :one
SELECT id, type, category, difficulty, question FROM trivias
WHERE id = $1
`

func (q *Queries) GetTriviaByID(ctx context.Context, id uuid.UUID) (Trivia, error) {
	row := q.db.QueryRowContext(ctx, getTriviaByID, id)
	var i Trivia
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Category,
		&i.Difficulty,
		&i.Question,
	)
	return i, err
}

const getTriviaByQuestion = `-- name: GetTriviaByQuestion :one
SELECT id, type, category, difficulty, question FROM trivias
WHERE question = $1
`

func (q *Queries) GetTriviaByQuestion(ctx context.Context, question string) (Trivia, error) {
	row := q.db.QueryRowContext(ctx, getTriviaByQuestion, question)
	var i Trivia
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.Category,
		&i.Difficulty,
		&i.Question,
	)
	return i, err
}
